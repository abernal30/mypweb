[{"path":"index.html","id":"machine-learning-introductory-guide","chapter":"Machine learning introductory guide","heading":"Machine learning introductory guide","text":"book Machine learning introductory guide!work Aturo Bernal\nVisit GitHub repository site.","code":""},{"path":"preface.html","id":"preface","chapter":"Preface","heading":"Preface","text":"text examples aim generate basic guide Machine Learning (ML) methodology. writing book inspired students Accounting AI course Tecnologico de Monterrey spring 2023.following steps may differ books, data scientists, experts many ways deal whit machine learning. precisely richness area expertise. existed one way apply machine learning, everybody use !!Python codes files stored GitHub repository site.","code":""},{"path":"preface.html","id":"outline","chapter":"Preface","heading":"Outline","text":"","code":""},{"path":"python-basics.html","id":"python-basics","chapter":"1 Python Basics","heading":"1 Python Basics","text":"section covers topics required following chapters. suggest covering section someone yet gain previous knowledge Python programming.","code":""},{"path":"python-basics.html","id":"jupyter-notebook","chapter":"1 Python Basics","heading":"1.1 1 Jupyter Notebook","text":"book, work Jupyter Notebook, original web application creating sharing computational documents. offers simple, streamlined, document-centric experience.See https://jupyter.org/.","code":""},{"path":"python-basics.html","id":"data-types-numerical-and-text-objects","chapter":"1 Python Basics","heading":"1.2 Data types, numerical and text objects","text":"Python programming language lets us work quickly integrate systems effectively contains many data types part core language (py?).entities can create manipulate Python called objects. make objects applying assignment operator (‘=’).example, create object “”; winch assigned value 4.object Python tho characteristics, object type object value.Object type tells Python kind object ’s dealing . type number, string, list, something else. book, use types objects. Also, cover complex data structures dictionaries, arrays data frames.function type() shows us object type. example, object x integer(int):example, object type integer(int), value 4.Besides integers, Python provides numeric types, floating point numbers, complex numbers (example (5j). example:example string (str) :adding ” ” tell Python Apple string.","code":"\nx=4\nx\n#> 4type(x)\n#> <class 'int'>type(1.23)\n#> <class 'float'>y=\"Apple\"\ntype(y)\n#> <class 'str'>"},{"path":"python-basics.html","id":"list-and-object-attributes","chapter":"1 Python Basics","heading":"1.3 List and object attributes","text":"list another useful object Python, vector integers, strings, .Objects whose value can change called mutable objects, whereas objects whose value unchangeable ’ve created called immutable.Python objects either data functions associated . known attributes. name attribute follows name object. two separated dot . two types attributes called either data attributes methods.“list” data type methods. methods “list” objects:printed first ten methods. list, can find methods. section, cover examples—method append, appends object end list.data attribute contains information object. example, get number elements list, use data method “len.”ways manipulate “list” without method. instance, concatenate two different lists:select element list, example, selecting second element list:can see, instead typing s[2], write number one Python starts counting zero.example, replace number 3 lis “s” number 100 replace element list.remove element, example, number 2:","code":"liste=[1,2,3]\nliste\n#> [1, 2, 3]type(liste)\n#> <class 'list'>4 # is inmutable\n\n# but liste is mutable\n#> 4\nliste=[\"a\",\"b\"]s=[1,2,3,4]\ndir(s)[1:10]\n#> ['__class__', '__class_getitem__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__']s.append(6)\ns\n#> [1, 2, 3, 4, 6]len(s)\n#> 5t=[12,14,16]\ns=s+t\ns\n#> [1, 2, 3, 4, 6, 12, 14, 16]s[1]\n#> 2s[0]\n#> 1s[2]=100\ns\n#> [1, 2, 100, 4, 6, 12, 14, 16]s.remove(2)\ns\n#> [1, 100, 4, 6, 12, 14, 16]"},{"path":"python-basics.html","id":"dictionaries","chapter":"1 Python Basics","heading":"1.4 Dictionaries","text":"Dictionaries useful objects performing fast look-ups underscored data.“dictionaries” two components, keys values. keys:values:Dictionaries mutable, can modify content, adding new element:modifying element:ask element dictionary:combine two lists dictionary, two keys four values :may want use one list keys values:","code":"grades_dict={\"Paulina\": 100, \"Coral\":95} \ngrades_dict\n#> {'Paulina': 100, 'Coral': 95}grades_dict.keys()\n#> dict_keys(['Paulina', 'Coral'])grades_dict.values()\n#> dict_values([100, 95])grades_dict[\"Alejandra\"]=120\ngrades_dict\n#> {'Paulina': 100, 'Coral': 95, 'Alejandra': 120}# modify an element\ngrades_dict[\"Alejandra\"]=grades_dict[\"Alejandra\"]-30\ngrades_dict\n#> {'Paulina': 100, 'Coral': 95, 'Alejandra': 90}# members\n\n\"Karina\" in grades_dict\n#> Falsenames=[\"Eugenio\",\"Luis\",\"Isa\",\"Gisell\"]\nnumbers=[9,17,80,79]\ncombine = {\"Letthers\":names,\"Colors\":numbers}\ncombine\n#> {'Letthers': ['Eugenio', 'Luis', 'Isa', 'Gisell'], 'Colors': [9, 17, 80, 79]}stud= dict(zip(names, numbers))\nstud\n#> {'Eugenio': 9, 'Luis': 17, 'Isa': 80, 'Gisell': 79}"},{"path":"python-basics.html","id":"python-modules","chapter":"1 Python Basics","heading":"1.5 Python modules","text":"Python also contains building functions Python programs can use. user make functions developed someone else library.Python modules code libraries, can import Python modules using import statements. Two popular libraries Python Pandas Numpy.","code":""},{"path":"python-basics.html","id":"pandas-data-frames","chapter":"1 Python Basics","heading":"1.5.1 Pandas data frames","text":"Python package provides fast, flexible, expressive data structures designed make working “relational” “labeled” data easy intuitive. fundamental high-level building block practical, real-world data analysis Python. Additionally, aims become powerful flexible open-source data analysis/manipulation tool available language. already well way toward goal.use create manipulate data frames, two-dimensional, size-mutable, potentially heterogeneous tabular data.install Pandas module, write notebook cell Conda terminal prompt “pip install pandas” Terminal prompt.import library use “import” statement:name Pandas, use “” statement give pandas short name. , use , easier call pd pandas. example, create data frame, call “pd”. method DataFrame, referring calling method DataFrame library pandas:previous example, argument function columns; winch column name data frame. know function arguments, ask like :previous example, default, index, left column without title, numbered zero 3, want change index:take advantage creation dictionary transform data frame:want student_number columns instead row, transpose data frame:apply method (function) data frame, must type Pandas object dot method. useful method “shape,” gives us number rows columns.rename data frame column:also applies index:","code":"pip install pandasimport pandas as pdname=[\"Vale\",\"Diana\",\"Ivan\",\"Vivi\"]\ndf = pd.DataFrame(name,columns=[\"Column 1\"])\ndfhelp(pd.DataFrame) # or like this: pd.DataFrame?name=[\"Vale\",\"Diana\",\"Ivan\",\"Vivi\"]\nnumbers=[51,11,511,50]\ndf = pd.DataFrame(name,columns=[\"Column 1\"],index=numbers)\ndf#>     Column 1\n#> 51      Vale\n#> 11     Diana\n#> 511     Ivan\n#> 50      Vivimy_dict=dict(zip(name, numbers))\nsn=pd.DataFrame(my_dict,index=[\"Student_number\"])\nsnsn.transpose()name=[\"Estefanía\",\"Laura Yanet\",\"María Guadalupe\",\"Karla Lizette\"]\nnick=[\"Estef\",\"Yanet\",\"Lupita\",\"Karla\"]\nnumber=[1,2,3,4]\n\n# We use two list to create the dictionary\ncombine = {\"Nick_name\":nick,\"Name\":name}\n\n# and from the dictionary we create the  data frame\ndf=pd.DataFrame(combine,index=number)\ndf#>   Nick_name             name\n#> 1     Estef        Estefanía\n#> 2     Yanet      Laura Yanet\n#> 3    Lupita  María Guadalupe\n#> 4     Karla    Karla Lizettedf.shape \n#> (4, 2)df=df.rename(columns={\"Nick_name\": \"Nick\", \"name\": \"Names\"})\ndf##>      Nick            Names\n#> 1   Estef        Estefanía\n#> 2   Yanet      Laura Yanet\n#> 3  Lupita  María Guadalupe\n#> 4   Karla    Karla Lizettedf=df.rename(index={1: \"x\", 2: \"y\", 3: \"z\",4:\"w\"})\ndf#>      Nick            Names\n#> x   Estef        Estefanía\n#> y   Yanet      Laura Yanet\n#> z  Lupita  María Guadalupe\n#> w   Karla    Karla Lizette"},{"path":"python-basics.html","id":"selecting-rows-and-columns-in-a-data-frame","chapter":"1 Python Basics","heading":"1.5.2 Selecting rows and columns in a data frame","text":"select column, type column name:resulting object pandas series, one-dimensional object, list, index, case, data frame index.want keep data frame type, add square brackets twice:two columns :select rows, use method “.loc”.“loc” method also works selecting column:one column:Sometimes useful select position. use method .iloc[ rows, columns ] case. example, select second third columns:left side comma selecting rows, right columns. Another example:rows:insert new column:range method return object produces sequence integers start (inclusive) stop (exclusive) step. range(, j) produces , +1, +2, …, j-1.drooping colum(s):","code":"df[\"Nick\"]\n#> x     Estef\n#> y     Yanet\n#> z    Lupita\n#> w     Karla\n#> Name: Nick, dtype: objecttype(df[\"Nick\"])\n#> <class 'pandas.core.series.Series'>df[[\"Nick\"]]df[[\"Nick\",\"Names\"]]df.loc[[\"y\"]]df.loc[[\"y\",\"z\"]]df.loc[:, (\"Nick\",\"Names\")]df.iloc[: , 1:]df.iloc[: , 0:2]df.iloc[2: , ]num_2=list(range(4))\n\ndf[\"Numbers_2\"]=num_2\ndfdf.drop(columns=['Names'])df.drop(columns=['Names',\"Numbers_2\"])"},{"path":"python-basics.html","id":"reading-excel-and-csv-files","chapter":"1 Python Basics","heading":"1.6 Reading Excel and csv files","text":"can download Excel file copying pasting pasting browser following link:https://github.com/abernal30/ML_python/blob/main/df.xlsxI stored file sub-directory named “data,” called “df.xlsx”verify names Sheets, use following code:use function read_excel Pandas library read Excel file. case, use argument sheet_name=sheets[0], equivalent sheet_name=“Sheet1”.Sometimes useful read Excel file define index column Excel file. case, want column “Unnamed: 0”.","code":"import pandas as pd\nsheets=pd.ExcelFile(\"data/df.xlsx\").sheet_names\nsheets\n#> ['Sheet1', 'Sheet2', 'Sheet3']data=pd.read_excel(\"data/df.xlsx\",sheet_name=sheets[0])\ndatadata=pd.read_excel(\"data/df.xlsx\",sheet_name=sheets[0],index_col=\"Unnamed: 0\")\ndata"},{"path":"python-basics.html","id":"numpy-modules","chapter":"1 Python Basics","heading":"1.7 Numpy modules","text":"NumPy fundamental package scientific computing Python. Python library provides multidimensional array object, various derived objects (masked arrays matrices), assortment routines fast operations arrays, including mathematical, logical, shape manipulation, sorting, selecting, /O, discrete Fourier transforms, basic linear algebra, basic statistical operations, random simulation much .machine learning models useful work Numpy arrays.\nNumPy’s main object homogeneous multidimensional array.\nexample, define variables x y array.can create matrix several variables.Sometimes useful simulate missing value:","code":"import numpy as np\n\nX=np.array([[1,2,3],[4,5,6]])\nX\n#> array([[1, 2, 3],\n#>        [4, 5, 6]])Y=np.array([[2,4,6],[8,10,12]])\nY\n#> array([[ 2,  4,  6],\n#>        [ 8, 10, 12]])np.nan\n#> nan"},{"path":"python-basics.html","id":"missing-value-management","chapter":"1 Python Basics","heading":"1.8 Missing value management","text":"Suppose read Excel used section “Reading Excel CSV files.” want work “Unnamed: 2” column, header use second row.get better look data frame, select second third columns, following method:first look detect missing values using following function:tells us columns, “X” “Y”, two missing values.many alternatives manage . First eliminating row least one missing value.Another alternative filling value, example last value available data frame.value zero:still missing value index, letter “C”.\nnext function","code":"data=pd.read_excel(\"data/df.xlsx\",sheet_name=\"Sheet1\",index_col=\"Unnamed: 0\",header=2)\ndatadata=data.iloc[:,1:]\ndatadata.isna().sum()\n#> X    2\n#> Y    2\n#> dtype: int64data.dropna()data.fillna(method='ffill')data_clenan=data.replace(np.nan,0)\n\n# which is equivalent to \n#data.fillna(0)\n\ndata_clenandata_clean=data.replace(np.nan,0)\n\n# which is equivalent to \n#data.fillna(0)\n\ndata_clean\n#>          X     Y\n#> A      2.0  10.0\n#> B     50.0   0.0\n#> C      0.0  25.0\n#> NaN    0.0   0.0\n#> D     20.0  34.0\n#> E    200.0  23.0# This function skips the index elements of a data frame that are missing values, space or: \".\",\",\",\";\",\";\",\"'\",'\"\"'.\n# It returns a data frame without the ignored elements.\n# Parameters:\n# df: data frame  \n\n#---- Do not change anything from here ----\ndef clean_na_index2(df):\n    skips=[\".\",\",\",\";\",\";\",\"'\",'\"\"',\" \",np.nan]\n    con=[name_ind for name_ind in df.index if name_ind not in skips]\n    return  df.loc[con, ]\n#----- To here ------------\n\n#Run the code so that Python can execute the function\n\ndf_index_clean=clean_na_index2(data_clean)\ndf_index_clean"},{"path":"python-basics.html","id":"merge-joint-or-concatenate-data-frames","chapter":"1 Python Basics","heading":"1.9 Merge, joint or concatenate data frames","text":"Suppose want merge object df_index_clean previous section, data frame “Sheet2” Excel file “df.xlsx”:case, data frames index:can use function concat. argument axis=1 concatenate columns data frames columns.Otherwise concatenate index (rows)","code":"#,header=2\ndata=pd.read_excel(\"data/df.xlsx\",sheet_name=\"Sheet2\",index_col=\"Unnamed: 0\")\ndataprint(data.index)\n#> Index(['A', 'B', 'C', 'D', 'E'], dtype='object')\nprint(df_index_clean.index)\n#> Index(['A', 'B', 'C', 'D', 'E'], dtype='object')pd.concat([df_index_clean,data],axis=1)pd.concat([df_index_clean,data])\n"},{"path":"python-basics.html","id":"apis","chapter":"1 Python Basics","heading":"1.10 APIS","text":"","code":""},{"path":"python-basics.html","id":"plots-or-graphs","chapter":"1 Python Basics","heading":"1.11 Plots or graphs","text":"","code":""},{"path":"python-basics.html","id":"dates-management","chapter":"1 Python Basics","heading":"1.12 Dates management","text":"section mange data frame dates.analysis machine learning, require index data date format. previous data frame index type string:, use following function:Now index “Timestamp” format. moment, let’s say date format.","code":"data=pd.read_excel(\"data/df.xlsx\",sheet_name=\"Sheet3\")\n#,index_col=\"Unnamed: 0\"\ndatatype(data.index[0])\n#> <class 'int'># This function transforms the data frame index into a date format  \n# (Timestamp). \n# It returns a data frame with the new date index\n# Parameters:\n# data: data frame with two columns, a date column and another one\n# i_date: is the start date of the new index\n# freq_i; frequency if the new index, \"y\" for year, \"m\" month, \"d\" day, \"h\" hour.\n# col_name: name of the column in the data frame data that is not the date\n# date_name= name of the column in the data that is the date\n#---- Do not change anything from here ----\ndef index_date(data,i_date,freq_i,col_name,date_name):\n  dat=data.set_index(date_name)\n  ventas_s= pd.Series(\n  list(dat[col_name]), index=pd.date_range(i_date, periods=len(dat),\n  freq=freq_i), name=col_name)\n  return pd.DataFrame(ventas_s)\n#----- To here ------------\n\n#Run the code so that Python can execute the function\n\ni_date=\"1-1-2020\"\nfreq_i=\"m\"\ncol_name=\"Sales\"\ndate_name=\"date\"\ndata_ind_date=index_date(data,i_date,freq_i,col_name,date_name)\ndata_ind_date"}]
