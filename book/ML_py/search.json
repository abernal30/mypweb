[{"path":"index.html","id":"machine-learning-introductory-guide","chapter":"Machine learning introductory guide","heading":"Machine learning introductory guide","text":"book Machine learning introductory guide!work Aturo Bernal\nVisit GitHub repository site.","code":""},{"path":"preface.html","id":"preface","chapter":"Preface","heading":"Preface","text":"text examples aim generate basic guide Machine Learning (ML) methodology. writing book inspired students Accounting AI course Tecnologico de Monterrey spring 2023.following steps may differ books, data scientists, experts many ways deal whit machine learning. precisely richness area expertise. existed one way apply machine learning, everybody use !!Python codes files stored GitHub repository site.","code":""},{"path":"preface.html","id":"outline","chapter":"Preface","heading":"Outline","text":"","code":""},{"path":"python-basics.html","id":"python-basics","chapter":"1 Python Basics","heading":"1 Python Basics","text":"section covers topics required following chapters. suggest covering section someone yet gain previous knowledge Python programming.","code":""},{"path":"python-basics.html","id":"jupyter-notebook","chapter":"1 Python Basics","heading":"1.1 1 Jupyter Notebook","text":"book, work Jupyter Notebook, original web application creating sharing computational documents. offers simple, streamlined, document-centric experience.See https://jupyter.org/.","code":""},{"path":"python-basics.html","id":"data-types-numerical-and-text-objects","chapter":"1 Python Basics","heading":"1.2 Data types, numerical and text objects","text":"Python programming language lets us work quickly integrate systems effectively contains many data types part core language (py?).entities can create manipulate Python called objects. make objects applying assignment operator (‘=’).example, create object “”; winch assigned value 4.object Python tho characteristics, object type object value.Object type tells Python kind object ’s dealing . type number, string, list, something else. book, use types objects. Also, cover complex data structures dictionaries, arrays data frames.function type() shows us object type. example, object x integer(int):example, object type integer(int), value 4.Besides integers, Python provides numeric types, floating point numbers, complex numbers (example (5j). example:example string (str) :adding ” ” tell Python Apple string.","code":"x=4\nx\n#> 4type(x)\n#> <class 'int'>type(1.23)\n#> <class 'float'>y=\"Apple\"\ntype(y)\n#> <class 'str'>"},{"path":"python-basics.html","id":"list-and-object-attributes","chapter":"1 Python Basics","heading":"1.3 List and object attributes","text":"list another useful object Python, vector integers, strings, .Objects whose value can change called mutable objects, whereas objects whose value unchangeable ’ve created called immutable.Python objects either data functions associated . known attributes. name attribute follows name object. two separated dot . two types attributes called either data attributes methods.“list” data type methods. methods “list” objects:printed first ten methods. list, can find methods. section, cover examples—method append, appends object end list.data attribute contains information object. example, get number elements list, use data method “len.”ways manipulate “list” without method. instance, concatenate two different lists:select element list, example, selecting second element list:can see, instead typing s[2], write number one Python starts counting zero.example, replace number 3 lis “s” number 100 replace element list.remove element, example, number 2:","code":"liste=[1,2,3]\nliste\n#> [1, 2, 3]type(liste)\n#> <class 'list'>4 # is inmutable\n\n# but liste is mutable\n#> 4\nliste=[\"a\",\"b\"]s=[1,2,3,4]\ndir(s)[1:10]\n#> ['__class__', '__class_getitem__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__']s.append(6)\ns\n#> [1, 2, 3, 4, 6]len(s)\n#> 5t=[12,14,16]\ns=s+t\ns\n#> [1, 2, 3, 4, 6, 12, 14, 16]s[1]\n#> 2s[0]\n#> 1s[2]=100\ns\n#> [1, 2, 100, 4, 6, 12, 14, 16]s.remove(2)\ns\n#> [1, 100, 4, 6, 12, 14, 16]"},{"path":"python-basics.html","id":"dictionaries","chapter":"1 Python Basics","heading":"1.4 Dictionaries","text":"Dictionaries useful objects performing fast look-ups underscored data.“dictionaries” two components, keys values. keys:values:Dictionaries mutable, can modify content, adding new element:modifying element:ask element dictionary:combine two lists dictionary, two keys four values :may want use one list keys values:","code":"grades_dict={\"Paulina\": 100, \"Coral\":95} \ngrades_dict\n#> {'Paulina': 100, 'Coral': 95}grades_dict.keys()\n#> dict_keys(['Paulina', 'Coral'])grades_dict.values()\n#> dict_values([100, 95])grades_dict[\"Alejandra\"]=120\ngrades_dict\n#> {'Paulina': 100, 'Coral': 95, 'Alejandra': 120}# modify an element\ngrades_dict[\"Alejandra\"]=grades_dict[\"Alejandra\"]-30\ngrades_dict\n#> {'Paulina': 100, 'Coral': 95, 'Alejandra': 90}# members\n\n\"Karina\" in grades_dict\n#> Falsenames=[\"Eugenio\",\"Luis\",\"Isa\",\"Gisell\"]\nnumbers=[9,17,80,79]\ncombine = {\"Letthers\":names,\"Colors\":numbers}\ncombine\n#> {'Letthers': ['Eugenio', 'Luis', 'Isa', 'Gisell'], 'Colors': [9, 17, 80, 79]}stud= dict(zip(names, numbers))\nstud\n#> {'Eugenio': 9, 'Luis': 17, 'Isa': 80, 'Gisell': 79}"},{"path":"python-basics.html","id":"python-modules","chapter":"1 Python Basics","heading":"1.5 Python modules","text":"Python also contains building functions Python programs can use. user make functions developed someone else library.Python modules code libraries, can import Python modules using import statements. Two popular libraries Python Pandas Numpy.","code":""},{"path":"python-basics.html","id":"pandas-data-frames","chapter":"1 Python Basics","heading":"1.5.1 Pandas data frames","text":"Python package provides fast, flexible, expressive data structures designed make working “relational” “labeled” data easy intuitive. fundamental high-level building block practical, real-world data analysis Python. Additionally, aims become powerful flexible open-source data analysis/manipulation tool available language. already well way toward goal.use create manipulate data frames, two-dimensional, size-mutable, potentially heterogeneous tabular data.install Pandas module, write notebook cell Conda terminal prompt “pip install pandas” Terminal prompt.import library use “import” statement:name Pandas, use “” statement give pandas short name. , use , easier call pd pandas. example, create data frame, call “pd”. method DataFrame, referring calling method DataFrame library pandas:previous example, argument function columns; winch column name data frame. know function arguments, ask like :previous example, default, index, left column without title, numbered zero 3, want change index:take advantage creation dictionary transform data frame:want student_number columns instead row, transpose data frame:apply method (function) data frame, must type Pandas object dot method. useful method “shape,” gives us number rows columns.rename data frame column:also applies index:","code":"pip install pandasimport pandas as pdname=[\"Vale\",\"Diana\",\"Ivan\",\"Vivi\"]\ndf = pd.DataFrame(name,columns=[\"Column 1\"])\ndfhelp(pd.DataFrame) # or like this: pd.DataFrame?name=[\"Vale\",\"Diana\",\"Ivan\",\"Vivi\"]\nnumbers=[51,11,511,50]\ndf = pd.DataFrame(name,columns=[\"Column 1\"],index=numbers)\ndfmy_dict=dict(zip(name, numbers))\nsn=pd.DataFrame(my_dict,index=[\"Student_number\"])\nsnsn.transpose()name=[\"Estefanía\",\"Laura Yanet\",\"María Guadalupe\",\"Karla Lizette\"]\nnick=[\"Estef\",\"Yanet\",\"Lupita\",\"Karla\"]\nnumber=[1,2,3,4]\n\n# We use two list to create the dictionary\ncombine = {\"Nick_name\":nick,\"Name\":name}\n\n# and from the dictionary we create the  data frame\ndf=pd.DataFrame(combine,index=number)\ndfdf.shape \n#> (4, 2)df=df.rename(columns={\"Nick_name\": \"Nick\", \"name\": \"Names\"})\ndfdf=df.rename(index={1: \"x\", 2: \"y\", 3: \"z\",4:\"w\"})\ndf"},{"path":"python-basics.html","id":"selecting-rows-and-columns-in-a-data-frame","chapter":"1 Python Basics","heading":"1.5.2 Selecting rows and columns in a data frame","text":"select column, type column name:resulting object pandas series, one-dimensional object, list, index, case, data frame index.want keep data frame type, add square brackets twice:two columns :select rows, use method “.loc”.“loc” method also works selecting column:one column:Sometimes useful select position. use method .iloc[ rows, columns ] case. example, select second third columns:left side comma selecting rows, right columns. Another example:rows:insert new column:range method return object produces sequence integers start (inclusive) stop (exclusive) step. range(, j) produces , +1, +2, …, j-1.drooping colum(s):","code":"df[\"Nick\"]\n#> x     Estef\n#> y     Yanet\n#> z    Lupita\n#> w     Karla\n#> Name: Nick, dtype: objecttype(df[\"Nick\"])\n#> <class 'pandas.core.series.Series'>df[[\"Nick\"]]df[[\"Nick\",\"Names\"]]df.loc[[\"y\"]]df.loc[[\"y\",\"z\"]]df.loc[:, (\"Nick\",\"Names\")]df.iloc[: , 1:]df.iloc[: , 0:2]df.iloc[2: , ]num_2=list(range(4))\n\ndf[\"Numbers_2\"]=num_2\ndfdf.drop(columns=['Names'])df.drop(columns=['Names',\"Numbers_2\"])"},{"path":"python-basics.html","id":"reading-excel-and-csv-files","chapter":"1 Python Basics","heading":"1.6 Reading Excel and csv files","text":"can download Excel file copying pasting pasting browser following link:https://github.com/abernal30/ML_python/blob/main/df.xlsxI stored file sub-directory named “data,” called “df.xlsx”verify names Sheets, use following code:use function read_excel Pandas library read Excel file. case, use argument sheet_name=sheets[0], equivalent sheet_name=“Sheet1”.Sometimes useful read Excel file define index column Excel file. case, want column “Unnamed: 0”.","code":"import pandas as pd\nsheets=pd.ExcelFile(\"data/df.xlsx\").sheet_names\nsheets\n#> ['Sheet1', 'Sheet2', 'Sheet3']data=pd.read_excel(\"data/df.xlsx\",sheet_name=sheets[0])\ndatadata=pd.read_excel(\"data/df.xlsx\",sheet_name=sheets[0],index_col=\"Unnamed: 0\")\ndata"},{"path":"python-basics.html","id":"numpy-modules","chapter":"1 Python Basics","heading":"1.7 Numpy modules","text":"NumPy fundamental package scientific computing Python. Python library provides multidimensional array object, various derived objects (masked arrays matrices), assortment routines fast operations arrays, including mathematical, logical, shape manipulation, sorting, selecting, /O, discrete Fourier transforms, basic linear algebra, basic statistical operations, random simulation much .machine learning models useful work Numpy arrays.\nNumPy’s main object homogeneous multidimensional array.\nexample, define variables x y array.can create matrix several variables.Sometimes useful simulate missing value:","code":"import numpy as np\n\nX=np.array([[1,2,3],[4,5,6]])\nX\n#> array([[1, 2, 3],\n#>        [4, 5, 6]])Y=np.array([[2,4,6],[8,10,12]])\nY\n#> array([[ 2,  4,  6],\n#>        [ 8, 10, 12]])np.nan\n#> nan"},{"path":"python-basics.html","id":"missing-value-management","chapter":"1 Python Basics","heading":"1.8 Missing value management","text":"Suppose read Excel used section “Reading Excel CSV files.” want work “Unnamed: 2” column, header use second row.get better look data frame, select second third columns, following method:first look detect missing values using following function:tells us columns, “X” “Y”, two missing values.many alternatives manage . First eliminating row least one missing value.Another alternative filling value, example last value available data frame.value zero:still missing value index, letter “C”.\nnext function","code":"data=pd.read_excel(\"data/df.xlsx\",sheet_name=\"Sheet1\",index_col=\"Unnamed: 0\",header=2)\ndatadata=data.iloc[:,1:]\ndatadata.isna().sum()\n#> X    2\n#> Y    2\n#> dtype: int64data.dropna()data.fillna(method='ffill')data_clenan=data.replace(np.nan,0)\n\n# which is equivalent to \n#data.fillna(0)\n\ndata_clenan# This function skips the index elements of a data frame that are missing values, space or: \".\",\",\",\";\",\";\",\"'\",'\"\"'.\n# It returns a data frame without the ignored elements.\n# Parameters:\n# df: data frame. The object for which the method is called\n\n#---- Do not change anything from here ----\ndef clean_na_index2(df):\n    skips=[\".\",\",\",\";\",\";\",\"'\",'\"\"',\" \",np.nan]\n    con=[name_ind for name_ind in df.index if name_ind not in skips]\n    return  df.loc[con, ]\n#----- To here ------------\n\n#Run the code so that Python can execute the function\n\ndf_index_clean=clean_na_index2(data_clean)\ndf_index_clean"},{"path":"python-basics.html","id":"merge-joint-or-concatenate-data-frames","chapter":"1 Python Basics","heading":"1.9 Merge, joint or concatenate data frames","text":"Suppose want merge object df_index_clean previous section, data frame “Sheet2” Excel file “df.xlsx”:case, data frames index:can use function concat. argument axis=1 concatenate columns data frames columns.Otherwise concatenate index (rows)","code":"#,header=2\ndata=pd.read_excel(\"data/df.xlsx\",sheet_name=\"Sheet2\",index_col=\"Unnamed: 0\")\ndataprint(data.index)\n#> Index(['A', 'B', 'C', 'D', 'E'], dtype='object')\nprint(df_index_clean.index)\n#> Index(['A', 'B', 'C', 'D', 'E'], dtype='object')pd.concat([df_index_clean,data],axis=1)pd.concat([df_index_clean,data])\n"},{"path":"python-basics.html","id":"apis-application-programming-interface","chapter":"1 Python Basics","heading":"1.10 API´s (Application Programming Interface)","text":"","code":""},{"path":"python-basics.html","id":"the-yfinance-library","chapter":"1 Python Basics","heading":"1.10.1 The “yfinance” library","text":"designed download market data Yahoo! Finance. see install information: https://pypi.org/project/yfinance/following code shows dictionary contains information company address, business summary, etc.download ticker´s prices.can see method help (help(msft.history)), valid periods : 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,maxAlso parameters interval=‘1d’: intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3moFor procedures apply book, require dates format, example “%Y-%m-%d”. ","code":"import yfinance as yf\n\nmsft = yf.Ticker(\"MSFT\")msft.infomsft.history(period=\"1mo\").head()import yfinance as yf\n# This function download market data from Yahoo! Finance's\n# It returns a data frame with a specific format date. \n# Parameters:\n# ticker: Yahoo finance ticker symbol\n# per: valid periods are: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max\n# inter: intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo\n# price_type: Open', 'High', 'Low', 'Close', 'Volume', 'Dividends', 'Stock Splits\n# format_date:  index format date\n# d_ini: initial date if the subset\n# d_fin: final date of the subset\n\n#---- Do not change anything from here ----\ndef my_yahoo(ticker,per,inter,price_type,format_date,d_ini,d_fin):\n    import pandas as pd\n    x = yf.Ticker(ticker)\n    hist = x.history(period=per,interval=inter)\n    date=list(hist.index)\n    hist_date=[date.strftime(format_date) for date in date]\n    price=list(hist[price_type])\n    hist={ticker:price}\n    hist=pd.DataFrame(hist,index=hist_date)\n    return hist.loc[d_ini:d_fin]\n#----- To here ------------\n\n#Run the code cell so that Python can execute the functionformat_date=\"%Y-%m-%d\"\nper=\"5y\"\ninter='1mo'\nprice_type=\"Close\"\nticker=\"^MXX\"\nd_ini=\"2021-01-01\"\nd_fin=\"2022-12-01\"\n\nipc=my_yahoo(ticker,per,inter,price_type,format_date,d_ini,d_fin)\nipc.head()"},{"path":"python-basics.html","id":"banxico-api","chapter":"1 Python Basics","heading":"1.10.2 Banxico API","text":"download historical information Mexican central bank (BANXICO). interest rates, exchange rates macroeconomic information. see install information:\nhttps://pypi.org/project/sie-banxico/need get token following web page:\nhttps://www.banxico.org.mx/SieAPIRest/service/v1/token?locale=enThe token must look like . store object, example:web page see Series catalog, variable ID:example, want download following Series:SF17908: Exchange rate Pesos per US dollarSF282: 28 days Mexican treasury billsSP74660: Mexican inflation rateSR16734: Global indicator Mexican economic activity","code":"token = \"e3980208bf01ec653aba9aee3c2d6f70f6ae8b066d2545e379b9e0ef92e9de25\"from sie_banxico import SIEBanxico\n\n# This function download information from BANXICO \n# It returns a data frame with a specific format date\n# Parameters:\n# token: The token object\n# my_series: Banxico´s Series ID´s\n# my_series_name: The short name we want to assign to the Serie.\n# d_in: initian date of the subset\n# d_fin: final date of the subset\n# format_date: index format date\n\n#---- Do not change anything from here ----\ndef my_banxico_py(token,my_series,my_series_name,d_in,d_fin,format_date):\n    import pandas as pd\n    le=len(my_series)\n    ser=0\n    if(le==1):\n        ser=0\n        api = SIEBanxico(token = token, id_series = my_series[ser])\n        timeseries_range=api.get_timeseries_range(init_date=d_in,end_date=d_fin)\n        timeseries_range=timeseries_range['bmx']['series'][0]['datos']\n        data=pd.DataFrame(timeseries_range)\n        dates=[pd.Timestamp(date).strftime(format_date) for date in list(data[\"fecha\"])]\n        data=pd.DataFrame({my_series_name[ser]:list(data[\"dato\"])},index=dates)\n    else:\n        ser=0\n        api = SIEBanxico(token = token, id_series = my_series[ser])\n        timeseries_range=api.get_timeseries_range(init_date=d_in, end_date=d_fin)\n        timeseries_range=timeseries_range['bmx']['series'][0]['datos']\n        data=pd.DataFrame(timeseries_range)\n        dates=[pd.Timestamp(date).strftime(format_date) for date in list(data[\"fecha\"])]\n        data=pd.DataFrame({my_series_name[ser]:list(data[\"dato\"])},index=dates)\n        for ser in range(1,le):\n            api = SIEBanxico(token = token, id_series = my_series[ser])\n            timeseries_range=api.get_timeseries_range(init_date=d_in, end_date=d_fin)\n            timeseries_range=timeseries_range['bmx']['series'][0]['datos']\n            data2=pd.DataFrame(timeseries_range)\n            dates2=[pd.Timestamp(date).strftime(format_date) for date in list(data2[\"fecha\"])]\n            data2=pd.DataFrame({my_series_name[ser]:list(data2[\"dato\"])},index=dates2)\n            data=pd.concat([data,data2],axis=1)\n    ban_names=list(data.columns)\n    for col_i in range(data.shape[1]):\n        cel_num=[float(cel) for cel in data[ban_names[col_i]]]\n        data[ban_names[col_i]]=cel_num\n    return data\n  \n#----- To here ------------#Run the code cell so that Python can execute the function\nmy_series=['SF17908' ,'SF282',\"SP74660\",\"SR16734\"]\nmy_series_name=[\"TC\",\"Cetes_28\",\"Mex_inflation\",\"igae\"]\nd_in='2021-01-01'\nd_fin='2022-12-01'\nformat_date=\"%Y-%d-%m\"\nmy_banxico_py(token,my_series,my_series_name,d_in,d_fin,format_date).head()"},{"path":"python-basics.html","id":"plots-or-graphs","chapter":"1 Python Basics","heading":"1.11 Plots or graphs","text":"example, use method plot plot APPLE historical price. First, download prices.use function plot;","code":"format_date=\"%Y-%m-%d\"\nper=\"5y\"\ninter='1mo'\nprice_type=\"Close\"\nticker=\"AAPL\"\nd_ini=\"2023-01-01\"\nd_fin=\"2023-05-01\"\napple=my_yahoo(ticker,per,inter,price_type,format_date,d_ini,d_fin)apple.plot(title=\"APPLE close price\", ylabel=\"Price in $\",xlabel=\"Date\");"},{"path":"python-basics.html","id":"dates-management","chapter":"1 Python Basics","heading":"1.12 Dates management","text":"section mange data frame dates.analysis machine learning, require index data date format. previous data frame index type string:, use following function:Now index “Timestamp” format. moment, let’s say date format.","code":"data=pd.read_excel(\"data/df.xlsx\",sheet_name=\"Sheet3\")\n#,index_col=\"Unnamed: 0\"\ndatatype(data.index[0])\n#> <class 'int'># This function transforms the data frame index into a date format  \n# (Timestamp). \n# It returns a data frame with the new date index\n# Parameters:\n# data: data frame with two columns, a date column and another one\n# i_date: is the start date of the new index\n# freq_i; frequency if the new index, \"y\" for year, \"m\" month, \"d\" day, \"h\" hour.\n# col_name: name of the column in the data frame data that is not the date\n# date_name= name of the column in the data that is the date\n#---- Do not change anything from here ----\ndef index_date(data,i_date,freq_i,col_name,date_name):\n  dat=data.set_index(date_name)\n  ventas_s= pd.Series(\n  list(dat[col_name]), index=pd.date_range(i_date, periods=len(dat),\n  freq=freq_i), name=col_name)\n  return pd.DataFrame(ventas_s)\n#----- To here ------------\n\n#Run the code so that Python can execute the function\n\ni_date=\"1-1-2020\"\nfreq_i=\"m\"\ncol_name=\"Sales\"\ndate_name=\"date\"\ndata_ind_date=index_date(data,i_date,freq_i,col_name,date_name)\ndata_ind_date"},{"path":"ml-in-the-bussines-lascape.html","id":"ml-in-the-bussines-lascape","chapter":"2 ML in the bussines lascape","heading":"2 ML in the bussines lascape","text":"","code":""},{"path":"ml-in-the-bussines-lascape.html","id":"machine-learning-ml","chapter":"2 ML in the bussines lascape","heading":"2.1 Machine learning (ML)","text":"short, machine learning problem generally relates prediction data available. Machine Learning science (art) programming computers can learn data (Géron 2023). extracting knowledge data, research field intersection statistics, artificial intelligence, computer science. also known predictive analytics statistical learning (Muller?).\nMachine learning programming, programming problems require ML. detect problem facing ML problem, need objective, benefit company (client) apply business (Burton Shah 2013).paragraph, describe examples. describing examples, use terminology may sound unfamiliar , cover chapters.Understanding goal allows us determine kind data expect handle models apply. Suppose facing problem housing market, business objective detect investment opportunities buying sub-valuated (price) houses predicting housing prices. example, expect housing price data, housing location latitude, longitude, median age z, total rooms, etc. case, may apply supervised models linear regression evaluate model performance RMSE. Another example financial sector predicting new bank customer default loan (repay loan ). case, classification problem, use models logit LDA measure performance Confusion Matrix.\nhand, housing prices example, already information mentioned last paragraph, want know crime affects price areas. solve linear regression, wúltnd ML problem, causality one. ML problem want predict house prices certain areas crime increased. Even ML problem, wouldn´t necessarily benefit client us. example, client housing builder, help decide build. Still, client unaffected relationship crime-house prices, ML problem, benefiting client us.conclusion, handling data running algorithms, suggest establishing business goal, detecting ML problem, benefit company (client).","code":""},{"path":"ml-in-the-bussines-lascape.html","id":"variables-terminology-and-notation","chapter":"2 ML in the bussines lascape","heading":"2.2 Variables terminology and notation","text":"Many models cover book kind:\\[y=\\alpha_{0}\\ +\\beta_{1}\\ x_{1}+\\beta_{2}\\ x_{2}+...+\\beta_{n}\\ x_{n}+e\\]\n\\(y\\) called dependent variable, also materials , called explained, output variable response variable. hand, \\(x\\) called independent variables input variables, predictors features. \\(\\beta´s\\) parameters estimated, \\(e\\) error term.regression, idea estimate parameters \\(\\beta_{1}, \\beta_{2},...,\\beta_{n}\\), predict value \\(y\\). happens, represent predicted values estimated parameters :\\[\\hat{y}=\\beta_{0}\\ +\\hat{\\beta_{1}}\\ x_{1}+\\hat{\\beta_{1}}\\ x_{2}+...+\\ \\hat{\\beta_{1}}\\ x_{n}\\]\nAlso, compare \\(y_{}\\) predicted value, call residual, usually denoted \\(\\hat{e}\\). defined :\\[\\hat{e_{}}=y_{}-\\hat{y_{}}=y_{}-\\beta_{0}\\ -\\hat{\\beta_{1}}\\ x_{1i}-\\hat{\\beta_{1}}\\ x_{2i}-,...,-\\ \\hat{\\beta_{1}}\\ x_{ni}\\]\nwords, \\(\\hat{e_{}}\\) residual observation. example, data set \\(n\\) variables \\(m\\) observations, \\(m\\) residuals.","code":""},{"path":"training-and-evaluating-regression-models.html","id":"training-and-evaluating-regression-models","chapter":"3 Training and evaluating regression models","heading":"3 Training and evaluating regression models","text":"Machine learning models regression aim predict dependent variable, “y.” chapter describes machine learning processes predict time series. predict ASURB.MX close price. independent variables, use macroeconomic variables.\\[ASURB.MX\\_price_{t}=\\beta_{0}+\\beta_{1}\\ ER_{t-1} + \\beta_{2}\\ inflation_{t-1} + \\beta_{3}\\ srate_{t-1}+ \\beta_{4}\\ growth_{t-1}+ \\beta_{5}\\ mrate_{t-1}+ \\beta_{6}\\ inv_{t-1} + \\beta_{7}\\ MR_{t-1} + e_{t}\\]\n\\(ER\\) exchange rate USD-MXN, \\(inflation\\) Mexican inflation, \\(srate\\) short term Mexican treasury bills (28 days), \\(growth\\) monthly Mexican economic growth indicator, \\(mrate\\) 1 year Mexican treasury bills, \\(inv\\)Mexican gross fixed investment, \\(MR\\) Mexican stock market index \\(e\\) error term.","code":""},{"path":"training-and-evaluating-regression-models.html","id":"data-collection-and-cleaning.","chapter":"3 Training and evaluating regression models","heading":"3.1 Data collection and cleaning.","text":"section, use APIs cover Chapter 1. Also, use sources information. cases, detect clean missing values. First download yahoo finance information.Also, download macroeconomic variables using Banxico API used chapter 1.concatenate Banxico data Yahoo Finance one.","code":"import numpy as np\nimport pandas as pd\nimport yfinance as yf\nfrom sie_banxico import SIEBanxico\nfrom sklearn.metrics import mean_squared_error\n\nimport matplotlib.pyplot as plt# This function download market data from Yahoo! Finance's\n# It returns a data frame with a specific format date. \n# Parameters:\n# tickers: a list with the Yahoo Finance ticker symbol\n# inter: intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo\n# price_type: Open', 'High', 'Low', 'Close', 'Volume', 'Dividends', 'Stock Splits\n# format_date:  index format date\n# d_ini: initial date if the subset\n# d_fin: final date of the subset\n\ndef my_yahoo_tickers(tickers,inter,price_type,format_date,d_ini,d_fin):\n    def my_yahoo(ticker,inter,price_type,format_date,d_ini,d_fin):\n        x = yf.Ticker(ticker)\n        hist = x.history(start=d_ini,end=d_fin,interval=inter)\n        date=list(hist.index)\n        hist_date=[date.strftime(format_date) for date in date]\n        price=list(hist[price_type])\n        hist={ticker:price}\n        hist=pd.DataFrame(hist,index=hist_date)\n        return hist.loc[d_ini:d_fin]\n    if len(tickers)==1:\n        s1=my_yahoo(tickers[0],inter,price_type,format_date,d_ini,d_fin)\n    else:\n        s1=my_yahoo(tickers[0],inter,price_type,format_date,d_ini,d_fin)\n        for ticker in range(1,len(tickers)):\n            s2=my_yahoo(tickers[ticker],inter,price_type,format_date,d_ini,d_fin)\n            s1=pd.concat([s1,s2],axis=1)\n    return s1\ninter='1mo'\nprice_type=\"Close\"\nformat_date=\"%Y-%m-%d\"\nd_ini=\"2020-02-01\"\nd_fin=\"2023-03-01\"\ntickers = [ticker,\"^MXX\"]df=my_yahoo_tickers(tickers,inter,price_type,format_date,d_ini,d_fin)\ndf.head()\n#---- Do not change anything from here ----\n\ndef my_banxico_py(token,my_series,my_series_name,d_in,d_fin,format_date):\n    le=len(my_series)\n    ser=0\n    if(le==1):\n        ser=0\n        api = SIEBanxico(token = token, id_series = my_series[ser])\n        timeseries_range=api.get_timeseries_range(init_date=d_in, end_date=d_fin)\n        timeseries_range=timeseries_range['bmx']['series'][0]['datos']\n        data=pd.DataFrame(timeseries_range)\n        dates=[pd.Timestamp(date).strftime(format_date) for date in list(data[\"fecha\"])]\n        data=pd.DataFrame({my_series_name[ser]:list(data[\"dato\"])},index=dates)\n    else:\n        ser=0\n        api = SIEBanxico(token = token, id_series = my_series[ser])\n        timeseries_range=api.get_timeseries_range(init_date=d_in, end_date=d_fin)\n        timeseries_range=timeseries_range['bmx']['series'][0]['datos']\n        data=pd.DataFrame(timeseries_range)\n        dates=[pd.Timestamp(date).strftime(format_date) for date in list(data[\"fecha\"])]\n        data=pd.DataFrame({my_series_name[ser]:list(data[\"dato\"])},index=dates)\n        for ser in range(1,le):\n            api = SIEBanxico(token = token, id_series = my_series[ser])\n            timeseries_range=api.get_timeseries_range(init_date=d_in, end_date=d_fin)\n            timeseries_range=timeseries_range['bmx']['series'][0]['datos']\n            data2=pd.DataFrame(timeseries_range)\n            dates2=[pd.Timestamp(date).strftime(format_date) for date in list(data2[\"fecha\"])]\n            data2=pd.DataFrame({my_series_name[ser]:list(data2[\"dato\"])},index=dates2)\n            data=pd.concat([data,data2],axis=1)\n    ban_names=list(data.columns)\n    for col_i in range(data.shape[1]):\n        cel_num=[float(cel) for cel in data[ban_names[col_i]]]\n        data[ban_names[col_i]]=cel_num\n    return data\n#----- To here ------------\n    \ntoken = \"776cab8e243c5b661cee8571d7e3e5d573395471011cf093ab5684d233a80d67\"\n\nmy_series=['SF17908' ,'SF282',\"SP74660\",\"SR16734\",\"SF3367\",\"SR16525\"]\nmy_series_name=[\"TC\",\"Cetes_28\",\"infla\",\"igae\",\"Cetes_1a\",\"inv_fija\"]\nd_ini=\"2020-02-01\"\nd_fin=\"2023-02-01\"\nformat_date=\"%Y-%d-%m\"\nban=my_banxico_py(token,my_series,my_series_name,d_ini,d_fin,format_date)\nban.head()dataset=pd.concat([ban,df],axis=1)\ndataset.head()"},{"path":"training-and-evaluating-regression-models.html","id":"definition-of-the-independent-variable","chapter":"3 Training and evaluating regression models","heading":"3.1.1 Definition of the independent variable","text":"define independent variable tests.mention , want predict rticker` price one month. , model state lag one period, one month case, dependent variable\n\\(ASURB.MX\\_price_{t}\\). Remember model :\\[ASURB.MX\\_price_{t}=\\beta_{0}+\\beta_{1}\\ ER_{t-1} + \\beta_{2}\\ inflation_{t-1} + \\beta_{3}\\ srate_{t-1}+ \\beta_{4}\\ growth_{t-1}+ \\beta_{5}\\ mrate_{t-1}+ \\beta_{6}\\ inv_{t-1} + \\beta_{7}\\ MR_{t-1} + e_{t}\\]\nsuffix \\(t-1\\) indicates variable one period period \\(t\\).automate procedure, define:use function shift():insert lagged variable data set, adding text “_lag”:see, last row missing value, one lost lag.missing value ´t allow us perform procedures . cut , using method shape, shows number rows columns data frame.case data set 37 rows 9 columns.define dependent variable (Y):","code":"var=ticker # name of the ticker we want to predict\nlag=-1 # number of periods we want to lagy_lag=dataset[var].shift(lag) \ny_lag.head()#> 2020-02-01    208.942261\n#> 2020-03-01    225.808441\n#> 2020-04-01    213.797256\n#> 2020-05-01    240.083420\n#> 2020-06-01    206.921692\n#> Name: ASURB.MX, dtype: float64dataset[var+\"_lag\"]= y_lag\ndataset.head() #dataset.tail()dataset_lag=dataset.iloc[:dataset.shape[0]-1,]\ndataset_lag.head()Y=dataset_lag[var+\"_lag\"] # esto es el resultado, pero quiero automatizarlo\nY.head()\n#> 2020-02-01    208.942261\n#> 2020-03-01    225.808441\n#> 2020-04-01    213.797256\n#> 2020-05-01    240.083420\n#> 2020-06-01    206.921692\n#> Name: ASURB.MX_lag, dtype: float64"},{"path":"training-and-evaluating-regression-models.html","id":"testing-for-stationary-in-the-dependet-variable-y","chapter":"3 Training and evaluating regression models","heading":"3.1.2 Testing for stationary in the dependet variable (Y)","text":"stationary time series process one whose probability distributions stable time following sense: take collection random variables sequence shift sequence ahead h time periods, joint probability distribution must remain unchanged.practical level, want understand relationship two variables using regression analysis, model:\\[ASURB.MX\\_price_{t}=\\beta_{0}+\\beta_{1}\\ ER_{t-1} + \\beta_{2}\\ inflation_{t-1} +.. + e_{t},\\]need assume sort stability time. allow relationship two variables variables equation change arbitrarily time period, hope learn much change one variable affects variable access single time series realization (Wooldridge 2020). Appendix extend explanation.introductory machine learning book, apply Augmented Dickey-Fuller (ADF) (see (Wooldridge 2020) reading).second term output, P-value, less 10% (0.1), can perform prediction time series. greater 10%(0.1), adjust, change variable.case, P-value less 10%(0.1), time series stationary, adjustment. adjustment change independent varible:\\[\\Delta ASURB.MX\\_price_{t}=\\beta_{0}+\\beta_{1}\\ ER_{t-1} + \\beta_{2}\\ inflation_{t-1} +.. + e_{t},\\]\n\\(\\Delta ASURB.MX\\) means change variable, \\(ASURB.MX\\_price_{t}-ASURB.MX\\_price_{t-1}\\). use method diff. First need copy \ndataset_lag, wise get warning method.see lost one observation begining, cut row.define Y variable:Now make subset get independent variables (X´s):","code":"# This method shows the ADF statistic and P-value \n# Parameters:\n# data: is a data frame of time Pandas Series with the time serie \n#---- Do not change anything from here ----\n\nfrom statsmodels.tsa.stattools import adfuller\ndef adf(data):\n    ADF = adfuller(data)  \n    return print(f'ADF Statistic: {ADF[0]}',f'p-value: {ADF[1]}')\n#----- To here ------------\nadf(Y)\n#> ADF Statistic: -1.9361997214419064 p-value: 0.31522784631900724dataset_lag_dif=dataset_lag.copy() \ndataset_lag_dif[var+\"_lag_dif\"]=Y.diff()\ndataset_lag_dif.head()dataset_lag_dif=dataset_lag_dif.iloc[1:,]\ndataset_lag_dif.head()Y=dataset_lag_dif[var+\"_lag_dif\"]\nY.head()\n#> 2020-03-01    16.866180\n#> 2020-04-01   -12.011185\n#> 2020-05-01    26.286163\n#> 2020-06-01   -33.161728\n#> 2020-07-01    25.051361\n#> Name: ASURB.MX_lag_dif, dtype: float64X=dataset_lag_dif.drop(columns=[var,var+\"_lag\",var+\"_lag_dif\"],axis=1)\nX.head()\n#>                  TC  Cetes_28  infla  ...  Cetes_1a  inv_fija          ^MXX\n#> 2020-03-01  22.3784      6.81   0.29  ...      6.61     93.14  34554.531250\n#> 2020-04-01  24.2658      6.09   0.36  ...      5.80     63.16  36470.109375\n#> 2020-05-01  23.4230      5.47   0.30  ...      5.03     64.90  36122.730469\n#> 2020-06-01  22.2990      5.06   0.37  ...      4.91     78.69  37716.429688\n#> 2020-07-01  22.4033      4.82   0.40  ...      4.61     80.34  37019.679688\n#> \n#> [5 rows x 7 columns]"},{"path":"training-and-evaluating-regression-models.html","id":"training-and-test-set-back-testing","chapter":"3 Training and evaluating regression models","heading":"3.2 Training and test set (Back testing)","text":"machine learning literature common apply testing procedure several observations. call back-testing, divides data set training testing, often called in_sample out_sample.answer need back-testing, think want validate prediction performance, least two alternatives:Alternative 1: Estimate ML model, make prediction wait time, example, 30 days, verify prediction good ; forecast good (close real value), train test , let’s say 30 days .Alternative 2 (one apply): Take aside observations, assuming observations don’t know store data frame called “test.” Train test ML model. making good prediction, train test model get good prediction performance.start running Linear regression model, one several machine learning models.Apparently, get result. model object store information, coefficients model:\\[ASURB.MX\\_price_{t}=\\beta_{0}+\\beta_{1}\\ ER_{t-1} + \\beta_{2}\\ inflation_{t-1} + \\beta_{3}\\ srate_{t-1}+ \\beta_{4}\\ growth_{t-1}+ \\beta_{5}\\ mrate_{t-1}+ \\beta_{6}\\ inv_{t-1} + \\beta_{7}\\ MR_{t-1} + e_{t}\\]prediction ASURB.MX price, X_test data set:","code":"validation_size = 0.2\n\n#In case the data is not dependent on the time series, then train and test split randomly\n# seed = 7\n# X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=validation_size, random_state=seed)\n\n#In case the data is not dependent on the time series, then train and test split should be done based on sequential sample\n#This can be done by selecting an arbitrary split point in the ordered list of observations and creating two new datasets.\ntrain_size = int(len(X) * (1-validation_size))\nX_train, X_test = X[0:train_size], X[train_size:len(X)]\nY_train, Y_test = Y[0:train_size], Y[train_size:len(X)]from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train, Y_train)LinearRegression()LinearRegression()#>    Betas     Values\n#> 0  Beta1  -2.587712\n#> 1  Beta2  -0.435412\n#> 2  Beta3 -65.425396\n#> 3  Beta4  -0.877509\n#> 4  Beta5   0.507544\n#> 5  Beta6   0.924602\n#> 6  Beta7  -0.000094y_pred=model.predict(X_test)\ny_pred\n#> array([-2.1233116 , -5.14063355,  0.72607998,  2.69665977, 15.04951998,\n#>         5.80142587,  4.68486414])"},{"path":"training-and-evaluating-regression-models.html","id":"performance-measure-root-mean-square-error-rmse.","chapter":"3 Training and evaluating regression models","heading":"3.2.1 Performance Measure Root Mean Square Error (RMSE).","text":"previous section, discussed whether prediction good (prediction performance). section formally defines metrics prediction performance.first metric Root Mean Square Error (RMSE). mathematical formula compute RMSE :\\[RMSE =\\sqrt{\\frac{1}{n}\\ \\sum_{=1}^{n} (y_{}-\\hat{y_{}})^{2}} \\]\\(\\hat{y_{}}\\) prediction ith observation, \\(y_{}\\) ith observation independent variable store test set, n number observations.\\[\\hat{y_{}}=\\hat{\\beta_{0}}+\\hat{\\beta_{1}}x_{1}+,..,+\\hat{\\beta_{n}}x_{n}\\]can estimate RMSE using training data set. generally, care well model works training set. Rather, interested model performance tested unseen data; , try RMSE test data set validation set cross-validation. lower test RMSE, better prediction.","code":"from sklearn.metrics import mean_squared_error\n\nmean_squared_error(Y_test, y_pred)\n#> 1660.54739314444"},{"path":"training-and-evaluating-regression-models.html","id":"appendix","chapter":"3 Training and evaluating regression models","heading":"3.3 Appendix","text":"","code":""},{"path":"training-and-evaluating-regression-models.html","id":"stationary-and-nonstationary-time-series","chapter":"3 Training and evaluating regression models","heading":"3.3.1 Stationary and Nonstationary Time Series","text":"Historically, notion stationary process played important role analysis time series. stationary time series process one whose probability distributions stable time following sense: take collection random variables sequence shift sequence ahead h time periods, joint probability distribution must remain unchanged.stochastic process $x_{t}: t=1,2,…, $ stationary \nevery collection time indices \\(1 \\leq t_{1} < t_{2} < … < t_{m}\\), joint distribution \\((x_{t1} , x_{t2} , …, x_t{m})\\) joint distribution \\((x_{t1+h}=x_{t2+h},...,x_{tn+h})\\) integers \\(h \\geq 1\\).Covariance Stationary Process. stochastic process \\({x_{t}: t = 1, 2, …}\\) finite\nsecond moment \\(E(x_{t}^2) < \\infty\\) covariance stationary () \\(E(x_{t})\\) constant; (ii) \\(Var(x_{t})\\) constant; (iii) \\(t, h \\geq 1, Cov(x_{t}, x_{t+h})\\) depends h t.practical level, want understand relationship two variables using regression analysis, need assume sort stability time.allow relationship two variables (say, yt xt) change arbitrarily time period, hope learn much change one variable affects variable access single time series realization.stating multiple regression model time series data, assuming certain\nform stationarity \\(\\beta_{j}\\) change time.","code":""}]
