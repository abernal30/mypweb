[{"path":"index.html","id":"machine-learning-introductory-guide","chapter":"Machine learning introductory guide","heading":"Machine learning introductory guide","text":"book Machine learning introductory guide!work Aturo Bernal\nVisit GitHub repository site.","code":""},{"path":"preface.html","id":"preface","chapter":"Preface","heading":"Preface","text":"text examples aim generate basic guide Machine Learning (ML) methodology. following steps may differ books, data scientists, experts many ways deal whit machine learning. precisely richness area expertise. existed one way apply machine learning, everybody use !!Python codes files stored GitHub repository site.","code":""},{"path":"preface.html","id":"outline","chapter":"Preface","heading":"Outline","text":"","code":""},{"path":"python-basics.html","id":"python-basics","chapter":"1 Python Basics","heading":"1 Python Basics","text":"section covers topics required following chapters. suggest covering section someone yet gain previous knowledge Python programming.","code":""},{"path":"python-basics.html","id":"jupyter-notebook","chapter":"1 Python Basics","heading":"1.1 1 Jupyter Notebook","text":"book, work Jupyter Notebook, original web application creating sharing computational documents. offers simple, streamlined, document-centric experience.See https://jupyter.org/.","code":""},{"path":"python-basics.html","id":"data-types-numerical-and-text-objects","chapter":"1 Python Basics","heading":"1.2 Data types, numerical and text objects","text":"Python programming language lets work quickly integrate systems effectively contains many data types part core language (py?).entities can create manipulate python called objects. create objects applying assignment operator (‘=’).example, create object “”; winch assigned value 4.object Python tho characteristics, object type object value.Object type tells Python kind object ’s dealing . type number, string, list, something else. book use type objects. Also cover complex data structures dictionaries, arrays data frames.function type() give us object type. example, object x integer(int):example, object type integer(int) object value 4.Besides integers, Python provides numeric types, floating point numbers, complex numbers (example (5j). example:example string (str) :Look adding ” ” tell Python Apple string.","code":"\nx=4\nx\n#> 4type(x)\n#> <class 'int'>type(1.23)\n#> <class 'float'>y=\"Apple\"\ntype(y)\n#> <class 'str'>"},{"path":"python-basics.html","id":"list-and-object-attributes","chapter":"1 Python Basics","heading":"1.3 List and object attributes","text":"list another useful object Python, vector integers, strings, .Objects whose value can change called mutable objects, whereas objects whose value unchangeable ’ve created called immutable.Python objects either data functions associated . known attributes. name attribute follows name object. two separated dot . two types attributes called either data attributes methods.list data type methods. methods list objects:printed first 10 methods. list find methods. section cover examples. instance method append, appends object end list.data atribute contains information object. example, get number elements list, use data method len.ways manipulate list, without using method. instance, concatenate two different lists:select element list. example selecting second element list:can see, instead typing s[2], type number one, Python starts counting zero.replace element list, example replace number 3 lis “s” number 100To remove element, example number 2:","code":"liste=[1,2,3]\nliste\n#> [1, 2, 3]type(liste)\n#> <class 'list'>4 # is inmutable\n\n# but liste is mutable\n#> 4\nliste=[\"a\",\"b\"]s=[1,2,3,4]\ndir(s)[1:10]\n#> ['__class__', '__class_getitem__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__']s.append(6)\ns\n#> [1, 2, 3, 4, 6]len(s)\n#> 5t=[12,14,16]\ns=s+t\ns\n#> [1, 2, 3, 4, 6, 12, 14, 16]s[1]\n#> 2s[0]\n#> 1s[2]=100\ns\n#> [1, 2, 100, 4, 6, 12, 14, 16]s.remove(2)\ns\n#> [1, 100, 4, 6, 12, 14, 16]"},{"path":"python-basics.html","id":"dictionaries","chapter":"1 Python Basics","heading":"1.4 Dictionaries","text":"Dictionaries useful objects performing fast look-ups underscored data.two components, keys:values:Dictionaries mutable, can modify contents, adding new element:modifying element:ask elemnt dctionary:combine two lists dictionary, two keys four values :may want use one list keys values:","code":"grades_dict={\"Arturo\": 100, \"Fátima\":120} \ngrades_dict\n#> {'Arturo': 100, 'Fátima': 120}grades_dict.keys()\n#> dict_keys(['Arturo', 'Fátima'])grades_dict.values()\n#> dict_values([100, 120])grades_dict[\"Karina\"]=200\ngrades_dict\n#> {'Arturo': 100, 'Fátima': 120, 'Karina': 200}# modify an element\ngrades_dict[\"Arturo\"]=grades_dict[\"Arturo\"]-10\ngrades_dict\n#> {'Arturo': 90, 'Fátima': 120, 'Karina': 200}# members\n\n\"Karina\" in grades_dict\n#> Trueletters=[\"A\",\"B\",\"C\",\"D\"]\ncolors=[\"Blue\",\"Red\",\"Black\",\"Orange\"]\ncombine = {\"Letthers\":letters,\"Colors\":colors}\ncombine\n#> {'Letthers': ['A', 'B', 'C', 'D'], 'Colors': ['Blue', 'Red', 'Black', 'Orange']}region_colors = dict(zip(letters, colors))\nregion_colors\n#> {'A': 'Blue', 'B': 'Red', 'C': 'Black', 'D': 'Orange'}"},{"path":"python-basics.html","id":"python-modules.","chapter":"1 Python Basics","heading":"1.5 Python modules.","text":"Python also contains building functions can used Python programs. Functions made user developed someone else library.Python modules libraries code can import Python modules using import statements. Two mos popular libraries Python Pandas numpy.","code":""},{"path":"python-basics.html","id":"pandas-data-frames","chapter":"1 Python Basics","heading":"1.5.1 Pandas data frames","text":"Python package providing fast, flexible, expressive data structures designed make working “relational” “labeled” data easy intuitive. aims fundamental high-level building block practical, real-world data analysis Python. Additionally, broader goal becoming powerful flexible open source data analysis/manipulation tool available language. already well way toward goal.use create manipulate data frames, two-dimensional, size-mutable, potentially heterogeneous tabular data.install Pandas module, Terminal prompt cell Jupyter note book type: pip install pandas.import library use “import” statement:Look name pandas use “” statement, give pandas short name. , use easier call pd pandas. example, create data frame call pd. method DataFrame, referring calling function DataFrame library pandas:previous example, argument function columns, winch column name data frame. knowing function arguments, ask like :previous example, default index, left column without title, numbers zero 3, want change index:take advantage creation dictionary transform data frame:apply method (function) data frame, must type pandas object dot, method. useful useful method shape, give us number rows columns.rename column:also applies index:","code":"pip install pandasimport pandas as pdcolors=[\"Blue\",\"Red\",\"Black\",\"Orange\"]\ndf = pd.DataFrame(colors,columns=[\"Column 1\"])\ndfhelp(pd.DataFrame) # or like this: pd.DataFrame?letters=[\"A\",\"B\",\"C\",\"D\"]\ndf = pd.DataFrame(colors,columns=[\"Column 1\"],index=letters)\ndfmy_dict=dict(zip(letters, colors))\npd.DataFrame(my_dict,index=[0])letters=[\"A\",\"B\",\"C\",\"D\"]\ncolors=[\"Blue\",\"Red\",\"Black\",\"Orange\"]\nnumbers=[10,20,30,40]\n\n# We use two list to create the dictionary\ncombine = {\"Letters\":letters,\"Colors\":colors,\"Numbers\":numbers}\n\n# and from the dictionary we create the  data frame\ndf=pd.DataFrame(combine)\ndfdf.shape \n#> (4, 3)df=df.rename(columns={\"Letters\": \"let\", \"Colors\": \"col\"})\ndfdf=df.rename(index={0: \"x\", 1: \"y\", 2: \"z\"})\ndf"},{"path":"python-basics.html","id":"selecting-rows-and-columns-in-a-data-frame","chapter":"1 Python Basics","heading":"1.5.2 Selecting rows and columns in a data frame","text":"select column type column name:resulting object pandas series, one dimensional object, list, index, case data frame index.want keep data frame type, add swuare brackets twice:two columns :select rows use method .locThe loc method works also selecting columns:loc method works also selecting columns:times useful selecting position. case use method .iloc[ rows, columns ]. example select second third columns:left side comma selecting rows right columns. Another example:rows:inset new columnThe range method return object produces sequence integers start (inclusive) stop (exclusive) step. range(, j) produces , +1, +2, …, j-1.drooping colum(s):","code":"df[\"col\"]\n#> x      Blue\n#> y       Red\n#> z     Black\n#> 3    Orange\n#> Name: col, dtype: objecttype(df[\"col\"])\n#> <class 'pandas.core.series.Series'>df[[\"col\"]]df[[\"col\",\"let\"]]df.loc[[\"x\"]]df.loc[[\"x\",\"z\"]]# .styldf.loc[:, (\"col\",\"Numbers\")]df.iloc[: , 1:]df.iloc[: , 0:2]df.iloc[2: , ]num_2=list(range(4))\n\ndf[\"Numbers_2\"]=num_2\ndfdf.drop(columns=['col'])df.drop(columns=['col',\"let\"])"},{"path":"python-basics.html","id":"numpy","chapter":"1 Python Basics","heading":"1.5.3 Numpy","text":"NumPy fundamental package scientific computing Python. Python library provides multidimensional array object, various derived objects (masked arrays matrices), assortment routines fast operations arrays, including mathematical, logical, shape manipulation, sorting, selecting, /O, discrete Fourier transforms, basic linear algebra, basic statistical operations, random simulation much .machine learnig models useful work numpy arrays.\nNumPy’s main object homogeneous multidimensional array.\nexample, define variable x y array.can create matrix several variables.Sometimes useful simulate missing value:","code":"import numpy as np\n\nX=np.array([[1,2,3],[4,5,6]])\nX\n#> array([[1, 2, 3],\n#>        [4, 5, 6]])Y=np.array([[2,4,6],[8,10,12]])\nY\n#> array([[ 2,  4,  6],\n#>        [ 8, 10, 12]])np.nan\n#> nan"}]
